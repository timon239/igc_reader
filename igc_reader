#!/usr/bin/env python3
import os
os.environ['TK_SILENCE_DEPRECATION'] = '1'
import tkinter as tk
from tkinter import filedialog, ttk
import pandas as pd
from datetime import datetime
import subprocess

# Funktion zum Extrahieren relevanter Daten aus einer IGC-Datei
def parse_igc(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()
    
    date = ""
    start_time, start_alt, start_lat, start_lon = None, None, None, None
    end_time, end_alt, end_lat, end_lon = None, None, None, None
    
    for line in lines:
        if line.startswith("HFDTE"):
            date = f"{line[5:7]}.{line[7:9]}.20{line[9:11]}"
        elif line.startswith("B"):
            time = f"{line[1:3]}:{line[3:5]}:{line[5:7]}"
            lat = float(line[7:9]) + float(line[9:14]) / 60000
            lon = float(line[15:18]) + float(line[18:23]) / 60000
            alt = int(line[25:30])
            
            if start_time is None:
                start_time, start_alt, start_lat, start_lon = time, alt, lat, lon
            end_time, end_alt, end_lat, end_lon = time, alt, lat, lon
    
    duration = "-"
    if start_time and end_time:
        start_seconds = int(start_time[:2]) * 3600 + int(start_time[3:5]) * 60 + int(start_time[6:])
        end_seconds = int(end_time[:2]) * 3600 + int(end_time[3:5]) * 60 + int(end_time[6:])
        duration = f"{(end_seconds - start_seconds) // 3600}h {(end_seconds - start_seconds) % 3600 // 60}m"
    
    return [os.path.basename(file_path), date, start_time, start_alt, start_lat, start_lon, end_time, end_alt, end_lat, end_lon, duration]

# Funktion zur Verarbeitung aller IGC-Dateien im ausgewählten Ordner und dessen Unterordnern
def process_igc_files():
    folder = filedialog.askdirectory()
    if not folder:
        return
    
    data = []
    for root, dirs, files in os.walk(folder):
        for file in files:
            if file.endswith(".igc"):
                data.append(parse_igc(os.path.join(root, file)))
    
    # Sortieren der Daten nach Datum
    data.sort(key=lambda x: datetime.strptime(x[1], "%d.%m.%Y"))
    
    # Erstellen des Dateinamens mit aktuellem Datum
    current_date = datetime.now().strftime("%Y-%m-%d")
    default_filename = f"flugbuch_stand_{current_date}.csv"
    
    # Fragen, wo die Datei gespeichert werden soll
    save_path = filedialog.asksaveasfilename(defaultextension=".csv", initialfile=default_filename, filetypes=[("CSV files", "*.csv"), ("All files", "*.*")])
    if not save_path:
        return
    
    df = pd.DataFrame(data, columns=["Dateiname", "Datum", "Startzeit", "Starthöhe", "Start Lat", "Start Lon", "Landezeit", "Landhöhe", "Land Lat", "Land Lon", "Flugdauer"])
    df.to_csv(save_path, index=False)
    
    for row in tree.get_children():
        tree.delete(row)
    
    for row in data:
        tree.insert("", "end", values=row)
    
    # Speichern des Dateinamens für späteres Öffnen
    global saved_filename
    saved_filename = save_path

# Funktion zum Öffnen der erstellten Datei
def open_file():
    if saved_filename:
        subprocess.call(['open', saved_filename])

# GUI erstellen
root = tk.Tk()
root.title("IGC-Reader")
root.geometry("300x200")

frame = tk.Frame(root)
frame.pack(pady=10)

button = tk.Button(frame, text="Ordner wählen & verarbeiten", command=process_igc_files)
button.pack()

# Öffnen-Taste hinzufügen
open_button = tk.Button(frame, text="Erstellte Datei öffnen", command=open_file)
open_button.pack()

# Beenden-Taste hinzufügen
exit_button = tk.Button(frame, text="Beenden", command=root.quit)
exit_button.pack()

columns = ["Dateiname", "Datum", "Startzeit", "Starthöhe", "Start Lat", "Start Lon", "Landezeit", "Landhöhe", "Land Lat", "Land Lon", "Flugdauer"]
tree = ttk.Treeview(root, columns=columns, show="headings")
for col in columns:
    tree.heading(col, text=col)
    tree.column(col, width=100)

tree.pack(expand=True, fill="both")

root.mainloop()